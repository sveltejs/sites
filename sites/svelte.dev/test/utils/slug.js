import * as uvu from 'uvu';
import * as assert from 'uvu/assert';
import {urlsafeSlugProcessor, unicodeSafeProcessor} from '../../src/utils/slug.js';
import {SLUG_SEPARATOR as _} from '../../config.js';

function run(name, func) {
	const suite = uvu.suite(name);
	func(suite);
	suite.run();
}

run('urlsafeSlugProcessor -> ascii', it => {
	it('space separated words', () => {
		assert.equal(
			urlsafeSlugProcessor('Text expressions'),
			`Text${_}expressions`
		);
	});
	it('numbered text', () => {
		assert.equal(
			urlsafeSlugProcessor('1. export creates'),
			`1${_}export${_}creates`
		);
	});
	it('punctuated text', () => {
		assert.equal(
			urlsafeSlugProcessor('svelte.VERSION'),
			`svelte${_}VERSION`
		);
	});
	it('text starting with the dollar sign', () => {
		assert.equal(
			urlsafeSlugProcessor('$destroy method'),
			`$destroy${_}method`
		);
	});
	it('numbered text containing the dollar sign', () => {
		assert.equal(
			urlsafeSlugProcessor('1. export $destroy'),
			`1${_}export${_}$destroy`
		);
	});
	it('text containing the equal char', () => {
		assert.equal(
			urlsafeSlugProcessor('script context=module'),
			`script${_}context${_}module`
		);
	});
	it('text containing the colon char', () => {
		assert.equal(
			urlsafeSlugProcessor('svelte:body'),
			`svelte${_}body`
		);
	});
	it('text containing the slash char', () => {
		assert.equal(
			urlsafeSlugProcessor('svelte/motion'),
			`svelte${_}motion`
		);
	});
	it('text containing the comma char', () => {
		assert.equal(
			urlsafeSlugProcessor('svelte, motion'),
			`svelte${_}motion`
		);
	});
});

run('urlsafeSlugProcessor - unicode', it => {
	it('should translate symbols to English', () => {
		assert.equal(
			urlsafeSlugProcessor('Ich ‚ô• Deutsch'),
			`Ich${_}love${_}Deutsch`
		);
	});
	it('should remove emoji', () => {
		assert.equal(
			urlsafeSlugProcessor('Ich üòç Deutsch'),
			`Ich${_}Deutsch`
		);
	});
});

run('urlsafeSlugProcessor -> cyrillic', it => {
	it('space separated words', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`Vsplytie${_}i${_}perehvat${_}sobytij`
		);
	});
	it('numbered text', () => {
		assert.equal(
			urlsafeSlugProcessor('1 –í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`1${_}Vsplytie${_}i${_}perehvat${_}sobytij`
		);
	});
	it('punctuated text', () => {
		assert.equal(
			urlsafeSlugProcessor('.–í—Å–ø–ª—ã—Ç–∏–µ.–∏.–ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`Vsplytie${_}i${_}perehvat${_}sobytij`
		);
	});
	it('text starting with the dollar sign', () => {
		assert.equal(
			urlsafeSlugProcessor('$–í—Å–ø–ª—ã—Ç–∏–µ $ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`$Vsplytie${_}$${_}perehvat${_}sobytij`
		);
	});
	it('text containing the dollar sign', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µ$–ø–µ—Ä–µ—Ö–≤–∞—Ç'),
			`Vsplytie$perehvat`
		);
	});
	it('text containing the equal char', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µ = –ø–µ—Ä–µ—Ö–≤–∞—Ç=—Å–æ–±—ã—Ç–∏–π'),
			`Vsplytie${_}perehvat${_}sobytij`
		);
	});
	it('text containing the colon char', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µ : –ø–µ—Ä–µ—Ö–≤–∞—Ç:—Å–æ–±—ã—Ç–∏–π'),
			`Vsplytie${_}perehvat${_}sobytij`
		);
	});
	it('text containing the slash char', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µ / –ø–µ—Ä–µ—Ö–≤–∞—Ç/—Å–æ–±—ã—Ç–∏–π'),
			`Vsplytie${_}perehvat${_}sobytij`
		);
	});
	it('text containing the comma char', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µ, –ø–µ—Ä–µ—Ö–≤–∞—Ç'),
			`Vsplytie${_}perehvat`
		);
	});
});

run('urlsafeSlugProcessor -> ascii + cyrillic', it => {
	it('space separated words', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µ –∏ export –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`Vsplytie${_}i${_}export${_}perehvat${_}sobytij`
		);
	});
	it('ascii word concatenated to a cyrillic word', () => {
		assert.equal(
			urlsafeSlugProcessor('export–í—Å–ø–ª—ã—Ç–∏–µ'),
			'exportVsplytie'
		);
	});
	it('cyrillic word concatenated to an ascii word', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µexport'),
			`Vsplytieexport`
		);
	});
	it('numbered text', () => {
		assert.equal(
			urlsafeSlugProcessor('1 export –í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`1${_}export${_}Vsplytie${_}i${_}perehvat${_}sobytij`
		);
	});
	it('punctuated text', () => {
		assert.equal(
			urlsafeSlugProcessor('.–í—Å–ø–ª—ã—Ç–∏–µ.export.–∏.–ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`Vsplytie${_}export${_}i${_}perehvat${_}sobytij`
		);
	});
	it('text starting with the dollar sign, followed by ascii char', () => {
		assert.equal(
			urlsafeSlugProcessor('$export–í—Å–ø–ª—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`$exportVsplytie${_}perehvat${_}sobytij`
		);
	});
	it('text starting with the dollar sign, followed by unicode char', () => {
		assert.equal(
			urlsafeSlugProcessor('$–í—Å–ø–ª—ã—Ç–∏–µ export –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`$Vsplytie${_}export${_}perehvat${_}sobytij`
		);
	});
	it('text containing the dollar sign, followed by ascii char', () => {
		assert.equal(
			urlsafeSlugProcessor('export $destroy a component prop –í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`export${_}$destroy${_}a${_}component${_}prop${_}Vsplytie${_}i${_}perehvat${_}sobytij`
		);
	});
	it('text containing the dollar sign, followed by unicode char', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µ export $–í—Å–ø–ª—ã—Ç–∏–µ a component prop –í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`Vsplytie${_}export${_}$Vsplytie${_}a${_}component${_}prop${_}Vsplytie${_}i${_}perehvat${_}sobytij`
		);
	});
	it('text containing the equal char', () => {
		assert.equal(
			urlsafeSlugProcessor('script context=module –í—Å–ø–ª—ã—Ç–∏–µ=–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`script${_}context${_}module${_}Vsplytie${_}i${_}perehvat${_}sobytij`
		);
	});
	it('text containing the colon char', () => {
		assert.equal(
			urlsafeSlugProcessor('svelte:body –í—Å–ø–ª—ã—Ç–∏–µ –∏:–ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`svelte${_}body${_}Vsplytie${_}i${_}perehvat${_}sobytij`
		);
	});
	it('text containing the slash char', () => {
		assert.equal(
			urlsafeSlugProcessor('svelte/motion –í—Å–ø–ª—ã—Ç–∏–µ –∏ / –ø–µ—Ä–µ—Ö–≤–∞—Ç/—Å–æ–±—ã—Ç–∏–π'),
			`svelte${_}motion${_}Vsplytie${_}i${_}perehvat${_}sobytij`
		);
	});
	it('text containing the comma char', () => {
		assert.equal(
			urlsafeSlugProcessor('–í—Å–ø–ª—ã—Ç–∏–µ, export'),
			`Vsplytie${_}export`
		);
	});
});

run('unicodeSafeProcessor (preserve unicode) -> ascii', it => {
	it('space separated words', () => {
		assert.equal(
			unicodeSafeProcessor('Text expressions'),
			`Text${_}expressions`
		);
	});
	it('numbered text', () => {
		assert.equal(
			unicodeSafeProcessor('1. export creates'),
			`1${_}export${_}creates`
		);
	});
	it('punctuated text', () => {
		assert.equal(
			unicodeSafeProcessor('svelte.VERSION'),
			`svelte${_}VERSION`
		);
	});
	it('text starting with the dollar sign', () => {
		assert.equal(
			unicodeSafeProcessor('$destroy method'),
			`$destroy${_}method`
		);
	});
	it('numbered text containing the dollar sign', () => {
		assert.equal(
			unicodeSafeProcessor('1. export $destroy'),
			`1${_}export${_}$destroy`
		);
	});
	it('text containing the equal char', () => {
		assert.equal(
			unicodeSafeProcessor('script context=module'),
			`script${_}context${_}module`
		);
	});
	it('text containing the colon char', () => {
		assert.equal(
			unicodeSafeProcessor('svelte:body'),
			`svelte${_}body`
		);
	});
	it('text containing the slash char', () => {
		assert.equal(
			unicodeSafeProcessor('svelte/motion'),
			`svelte${_}motion`
		);
	});
	it('text containing the comma char', () => {
		assert.equal(
			unicodeSafeProcessor('svelte, motion'),
			`svelte${_}motion`
		);
	});
});

run('unicodeSafeProcessor (preserve unicode) -> unicode', it => {
	it('should preserve symbols', () => {
		assert.equal(
			unicodeSafeProcessor('Ich ‚ô• Deutsch'),
			`Ich${_}love${_}Deutsch`
		);
	});
	it('should remove emoji', () => {
		assert.equal(
			unicodeSafeProcessor('Ich üòç Deutsch'),
			`Ich${_}Deutsch`
		);
	});
});

run('unicodeSafeProcessor (preserve unicode) -> cyrillic', it => {
	it('space separated words', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('numbered text', () => {
		assert.equal(
			unicodeSafeProcessor('1 –í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`1${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('punctuated text', () => {
		assert.equal(
			unicodeSafeProcessor('.–í—Å–ø–ª—ã—Ç–∏–µ.–∏.–ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text starting with the dollar sign', () => {
		assert.equal(
			unicodeSafeProcessor('$–í—Å–ø–ª—ã—Ç–∏–µ $ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`$${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}$${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the dollar sign', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µ$–ø–µ—Ä–µ—Ö–≤–∞—Ç'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}$${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç`
		);
	});
	it('text containing the equal char', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µ = –ø–µ—Ä–µ—Ö–≤–∞—Ç=—Å–æ–±—ã—Ç–∏–π'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the colon char', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µ : –ø–µ—Ä–µ—Ö–≤–∞—Ç:—Å–æ–±—ã—Ç–∏–π'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the slash char', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µ / –ø–µ—Ä–µ—Ö–≤–∞—Ç/—Å–æ–±—ã—Ç–∏–π'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the comma char', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µ, –ø–µ—Ä–µ—Ö–≤–∞—Ç'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç`
		);
	});
});

run('unicodeSafeProcessor (preserve unicode) -> ascii + cyrillic', it => {
	it('space separated words', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µ –∏ export –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}export${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('ascii word concatenated to a cyrillic word', () => {
		assert.equal(
			unicodeSafeProcessor('export–í—Å–ø–ª—ã—Ç–∏–µ'),
			`export${_}–í—Å–ø–ª—ã—Ç–∏–µ`
		);
	});
	it('cyrillic word concatenated to an ascii word', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µexport'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}export`
		);
	});
	it('numbered text', () => {
		assert.equal(
			unicodeSafeProcessor('1 export –í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`1${_}export${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('punctuated text', () => {
		assert.equal(
			unicodeSafeProcessor('.–í—Å–ø–ª—ã—Ç–∏–µ.export.–∏.–ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}export${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text starting with the dollar sign, followed by ascii char', () => {
		assert.equal(
			unicodeSafeProcessor('$export–í—Å–ø–ª—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`$export${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text starting with the dollar sign, followed by unicode char', () => {
		assert.equal(
			unicodeSafeProcessor('$–í—Å–ø–ª—ã—Ç–∏–µ export –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`$${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}export${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the dollar sign, followed by ascii char', () => {
		assert.equal(
			unicodeSafeProcessor('export $destroy a component prop –í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`export${_}$destroy${_}a${_}component${_}prop${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the dollar sign, followed by unicode char', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µ export $–í—Å–ø–ª—ã—Ç–∏–µ a component prop –í—Å–ø–ª—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}export${_}$${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}a${_}component${_}prop${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the equal char', () => {
		assert.equal(
			unicodeSafeProcessor('script context=module –í—Å–ø–ª—ã—Ç–∏–µ=–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`script${_}context${_}module${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the colon char', () => {
		assert.equal(
			unicodeSafeProcessor('svelte:body –í—Å–ø–ª—ã—Ç–∏–µ –∏:–ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π'),
			`svelte${_}body${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the slash char', () => {
		assert.equal(
			unicodeSafeProcessor('svelte/motion –í—Å–ø–ª—ã—Ç–∏–µ –∏ / –ø–µ—Ä–µ—Ö–≤–∞—Ç/—Å–æ–±—ã—Ç–∏–π'),
			`svelte${_}motion${_}–í—Å–ø–ª—ã—Ç–∏–µ${_}–∏${_}–ø–µ—Ä–µ—Ö–≤–∞—Ç${_}—Å–æ–±—ã—Ç–∏–π`
		);
	});
	it('text containing the comma char', () => {
		assert.equal(
			unicodeSafeProcessor('–í—Å–ø–ª—ã—Ç–∏–µ, export'),
			`–í—Å–ø–ª—ã—Ç–∏–µ${_}export`
		);
	});
});
